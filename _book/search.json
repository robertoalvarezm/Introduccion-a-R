[{"path":"index.html","id":"acá-empieza","chapter":"1 Acá empieza","heading":"1 Acá empieza","text":"","code":""},{"path":"intro.html","id":"intro","chapter":"2 Introducción a R","heading":"2 Introducción a R","text":"R es un elenguaje de programación. Además es un entorno integrado para el manejo de datos, el cálculo, la generación de gráficos y análisis estadísticos.\nLas principales ventajas del uso de R son:Es software libre.Su facilidad para el manejo y almacenamiento de datos.Es un conjunto de operadores para el cálculo de vectores y matrices.Es una colección extensa e integrada de herramientas intermedias para el análisis estadístico de datos.Posee un multitud de facilidades gráficas de altísima calidadEs un lenguaje de programación (muy) poderoso con muchas librerías , bibliotecas más porpiamente dicho, especializadas disponibles.La mejor herramienta para trabajar con datos genómicos, proteomicos, redes, metabolómica, entre varias más.Casi todos podemos aprender por nuestra cuenta usar excel (pero hay que pagar por la licencia…), sin embargo es más díficil aprender por nuestra cuenta R; y si lo hacemos nos da una ventaja sobre el resto.","code":""},{"path":"intro.html","id":"paquetes-o-bibliotecas","chapter":"2 Introducción a R","heading":"2.1 Paquetes o bibliotecas","text":"Las funciones especializadas de R se guardan en bibliotecas (packages) que deben ser invocados ANTES de llamar una función de la bibliotecaUna manera de instalar bibliotecas es mediante el repositorio por defecto de R que es CRAN.Navega por CRAN y encuentra algunos paquetes que podrían interesarte. Hay miles y cada día aumentan.Para saber qué paquetes se tienen instalados en\ntu máquina teclea la función library()Para cargar un paquete en particular deben teclear, siempre y cuando ya esté instaladolibrary(nombre_de_paquete)Por ejemploPara visualizar los paquetes ya cargados tecleamosPara visualizar las funciones dentro de un paquete en particular se utiliza","code":"\nlibrary()\nlibrary(gplots)  ## \n## Attaching package: 'gplots'## The following object is masked from 'package:stats':\n## \n##     lowess\nsearch()##  [1] \".GlobalEnv\"        \"package:gplots\"    \"package:stats\"    \n##  [4] \"package:graphics\"  \"package:grDevices\" \"package:utils\"    \n##  [7] \"package:datasets\"  \"package:methods\"   \"Autoloads\"        \n## [10] \"package:base\"\nls(2)##  [1] \"angleAxis\"      \"balloonplot\"    \"bandplot\"       \"barplot2\"      \n##  [5] \"bluered\"        \"boxplot2\"       \"ci2d\"           \"col2hex\"       \n##  [9] \"colorpanel\"     \"greenred\"       \"heatmap.2\"      \"hist2d\"        \n## [13] \"lmplot2\"        \"lowess\"         \"ooplot\"         \"overplot\"      \n## [17] \"panel.overplot\" \"plot.venn\"      \"plotCI\"         \"plotLowess\"    \n## [21] \"plotmeans\"      \"qqnorm.aov\"     \"redblue\"        \"redgreen\"      \n## [25] \"reorder.factor\" \"residplot\"      \"rich.colors\"    \"sinkplot\"      \n## [29] \"smartlegend\"    \"space\"          \"textplot\"       \"venn\"          \n## [33] \"wapply\"\ndemo(graphics)## \n## \n##  demo(graphics)\n##  ---- ~~~~~~~~\n## \n## > #  Copyright (C) 1997-2009 The R Core Team\n## > \n## > require(datasets)\n## \n## > require(grDevices); require(graphics)\n## \n## > ## Here is some code which illustrates some of the differences between\n## > ## R and S graphics capabilities.  Note that colors are generally specified\n## > ## by a character string name (taken from the X11 rgb.txt file) and that line\n## > ## textures are given similarly.  The parameter \"bg\" sets the background\n## > ## parameter for the plot and there is also an \"fg\" parameter which sets\n## > ## the foreground color.\n## > \n## > \n## > x <- stats::rnorm(50)\n## \n## > opar <- par(bg = \"white\")\n## \n## > plot(x, ann = FALSE, type = \"n\")## \n## > abline(h = 0, col = gray(.90))\n## \n## > lines(x, col = \"green4\", lty = \"dotted\")\n## \n## > points(x, bg = \"limegreen\", pch = 21)\n## \n## > title(main = \"Simple Use of Color In a Plot\",\n## +       xlab = \"Just a Whisper of a Label\",\n## +       col.main = \"blue\", col.lab = gray(.8),\n## +       cex.main = 1.2, cex.lab = 1.0, font.main = 4, font.lab = 3)\n## \n## > ## A little color wheel.    This code just plots equally spaced hues in\n## > ## a pie chart.    If you have a cheap SVGA monitor (like me) you will\n## > ## probably find that numerically equispaced does not mean visually\n## > ## equispaced.  On my display at home, these colors tend to cluster at\n## > ## the RGB primaries.  On the other hand on the SGI Indy at work the\n## > ## effect is near perfect.\n## > \n## > par(bg = \"gray\")\n## \n## > pie(rep(1,24), col = rainbow(24), radius = 0.9)## \n## > title(main = \"A Sample Color Wheel\", cex.main = 1.4, font.main = 3)\n## \n## > title(xlab = \"(Use this as a test of monitor linearity)\",\n## +       cex.lab = 0.8, font.lab = 3)\n## \n## > ## We have already confessed to having these.  This is just showing off X11\n## > ## color names (and the example (from the postscript manual) is pretty \"cute\".\n## > \n## > pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)\n## \n## > names(pie.sales) <- c(\"Blueberry\", \"Cherry\",\n## +              \"Apple\", \"Boston Cream\", \"Other\", \"Vanilla Cream\")\n## \n## > pie(pie.sales,\n## +     col = c(\"purple\",\"violetred1\",\"green3\",\"cornsilk\",\"cyan\",\"white\"))## \n## > title(main = \"January Pie Sales\", cex.main = 1.8, font.main = 1)\n## \n## > title(xlab = \"(Don't try this at home kids)\", cex.lab = 0.8, font.lab = 3)\n## \n## > ## Boxplots:  I couldn't resist the capability for filling the \"box\".\n## > ## The use of color seems like a useful addition, it focuses attention\n## > ## on the central bulk of the data.\n## > \n## > par(bg=\"cornsilk\")\n## \n## > n <- 10\n## \n## > g <- gl(n, 100, n*100)\n## \n## > x <- rnorm(n*100) + sqrt(as.numeric(g))\n## \n## > boxplot(split(x,g), col=\"lavender\", notch=TRUE)## \n## > title(main=\"Notched Boxplots\", xlab=\"Group\", font.main=4, font.lab=1)\n## \n## > ## An example showing how to fill between curves.\n## > \n## > par(bg=\"white\")\n## \n## > n <- 100\n## \n## > x <- c(0,cumsum(rnorm(n)))\n## \n## > y <- c(0,cumsum(rnorm(n)))\n## \n## > xx <- c(0:n, n:0)\n## \n## > yy <- c(x, rev(y))\n## \n## > plot(xx, yy, type=\"n\", xlab=\"Time\", ylab=\"Distance\")## \n## > polygon(xx, yy, col=\"gray\")\n## \n## > title(\"Distance Between Brownian Motions\")\n## \n## > ## Colored plot margins, axis labels and titles.    You do need to be\n## > ## careful with these kinds of effects.    It's easy to go completely\n## > ## over the top and you can end up with your lunch all over the keyboard.\n## > ## On the other hand, my market research clients love it.\n## > \n## > x <- c(0.00, 0.40, 0.86, 0.85, 0.69, 0.48, 0.54, 1.09, 1.11, 1.73, 2.05, 2.02)\n## \n## > par(bg=\"lightgray\")\n## \n## > plot(x, type=\"n\", axes=FALSE, ann=FALSE)## \n## > usr <- par(\"usr\")\n## \n## > rect(usr[1], usr[3], usr[2], usr[4], col=\"cornsilk\", border=\"black\")\n## \n## > lines(x, col=\"blue\")\n## \n## > points(x, pch=21, bg=\"lightcyan\", cex=1.25)\n## \n## > axis(2, col.axis=\"blue\", las=1)\n## \n## > axis(1, at=1:12, lab=month.abb, col.axis=\"blue\")\n## \n## > box()\n## \n## > title(main= \"The Level of Interest in R\", font.main=4, col.main=\"red\")\n## \n## > title(xlab= \"1996\", col.lab=\"red\")\n## \n## > ## A filled histogram, showing how to change the font used for the\n## > ## main title without changing the other annotation.\n## > \n## > par(bg=\"cornsilk\")\n## \n## > x <- rnorm(1000)\n## \n## > hist(x, xlim=range(-4, 4, x), col=\"lavender\", main=\"\")## \n## > title(main=\"1000 Normal Random Variates\", font.main=3)\n## \n## > ## A scatterplot matrix\n## > ## The good old Iris data (yet again)\n## > \n## > pairs(iris[1:4], main=\"Edgar Anderson's Iris Data\", font.main=4, pch=19)## \n## > pairs(iris[1:4], main=\"Edgar Anderson's Iris Data\", pch=21,\n## +       bg = c(\"red\", \"green3\", \"blue\")[unclass(iris$Species)])## \n## > ## Contour plotting\n## > ## This produces a topographic map of one of Auckland's many volcanic \"peaks\".\n## > \n## > x <- 10*1:nrow(volcano)\n## \n## > y <- 10*1:ncol(volcano)\n## \n## > lev <- pretty(range(volcano), 10)\n## \n## > par(bg = \"lightcyan\")\n## \n## > pin <- par(\"pin\")\n## \n## > xdelta <- diff(range(x))\n## \n## > ydelta <- diff(range(y))\n## \n## > xscale <- pin[1]/xdelta\n## \n## > yscale <- pin[2]/ydelta\n## \n## > scale <- min(xscale, yscale)\n## \n## > xadd <- 0.5*(pin[1]/scale - xdelta)\n## \n## > yadd <- 0.5*(pin[2]/scale - ydelta)\n## \n## > plot(numeric(0), numeric(0),\n## +      xlim = range(x)+c(-1,1)*xadd, ylim = range(y)+c(-1,1)*yadd,\n## +      type = \"n\", ann = FALSE)## \n## > usr <- par(\"usr\")\n## \n## > rect(usr[1], usr[3], usr[2], usr[4], col=\"green3\")\n## \n## > contour(x, y, volcano, levels = lev, col=\"yellow\", lty=\"solid\", add=TRUE)\n## \n## > box()\n## \n## > title(\"A Topographic Map of Maunga Whau\", font= 4)\n## \n## > title(xlab = \"Meters North\", ylab = \"Meters West\", font= 3)\n## \n## > mtext(\"10 Meter Contour Spacing\", side=3, line=0.35, outer=FALSE,\n## +       at = mean(par(\"usr\")[1:2]), cex=0.7, font=3)\n## \n## > ## Conditioning plots\n## > \n## > par(bg=\"cornsilk\")\n## \n## > coplot(lat ~ long | depth, data = quakes, pch = 21, bg = \"green3\")## \n## > par(opar)"},{"path":"intro.html","id":"ayuda-en-r","chapter":"2 Introducción a R","heading":"2.2 Ayuda en R","text":"help(nombre_comando) o ?nombre_comandoson equivalentes para buscar ayuda sobre el comando solvePara buscar ayuda de funciones o palabra reservadas se utilizan comillasPara abrir la ayuda genral en un navegador (sólo si tenemos la ayuda en HTML instalada y tenemos conexión la red) se utilizaSi queremos ver ejemplos del uso de los comandos usamos la función ejemploTodo lo anterior requiere que conzocamos el nombre correcto del comando, pero ¿qué pasa si lo sabemos?\nPodemos utilizar el comando apropos() para encontrar todo lo relacionado con algún término","code":"\nhelp(solve)\n?solve\nhelp(\"for\")\nhelp.start()## starting httpd help server ... done## If the browser launched by '/usr/bin/open' is already running, it is\n##     *not* restarted, and you must switch to its window.\n## Otherwise, be patient ...\nhelp.search(\"clustering\")\nexample(\"hclust\")## \n## hclust> require(graphics)\n## \n## hclust> ### Example 1: Violent crime rates by US state\n## hclust> \n## hclust> hc <- hclust(dist(USArrests), \"ave\")\n## \n## hclust> plot(hc)## \n## hclust> plot(hc, hang = -1)## \n## hclust> ## Do the same with centroid clustering and *squared* Euclidean distance,\n## hclust> ## cut the tree into ten clusters and reconstruct the upper part of the\n## hclust> ## tree from the cluster centers.\n## hclust> hc <- hclust(dist(USArrests)^2, \"cen\")\n## \n## hclust> memb <- cutree(hc, k = 10)\n## \n## hclust> cent <- NULL\n## \n## hclust> for(k in 1:10){\n## hclust+   cent <- rbind(cent, colMeans(USArrests[memb == k, , drop = FALSE]))\n## hclust+ }\n## \n## hclust> hc1 <- hclust(dist(cent)^2, method = \"cen\", members = table(memb))\n## \n## hclust> opar <- par(mfrow = c(1, 2))\n## \n## hclust> plot(hc,  labels = FALSE, hang = -1, main = \"Original Tree\")## \n## hclust> plot(hc1, labels = FALSE, hang = -1, main = \"Re-start from 10 clusters\")## \n## hclust> par(opar)\n## \n## hclust> ### Example 2: Straight-line distances among 10 US cities\n## hclust> ##  Compare the results of algorithms \"ward.D\" and \"ward.D2\"\n## hclust> \n## hclust> mds2 <- -cmdscale(UScitiesD)\n## \n## hclust> plot(mds2, type=\"n\", axes=FALSE, ann=FALSE)## \n## hclust> text(mds2, labels=rownames(mds2), xpd = NA)\n## \n## hclust> hcity.D  <- hclust(UScitiesD, \"ward.D\") # \"wrong\"\n## \n## hclust> hcity.D2 <- hclust(UScitiesD, \"ward.D2\")\n## \n## hclust> opar <- par(mfrow = c(1, 2))\n## \n## hclust> plot(hcity.D,  hang=-1)## \n## hclust> plot(hcity.D2, hang=-1)## \n## hclust> par(opar)\napropos(\"solve\")## [1] \"backsolve\"     \"forwardsolve\"  \"qr.solve\"      \"solve\"        \n## [5] \"solve.default\" \"solve.qr\""},{"path":"intro.html","id":"sesiones-interactivas","chapter":"2 Introducción a R","heading":"2.2.1 Sesiones interactivas","text":"En R también podmeos generar elementos interactivos con la bilioteca shiny","code":"## \n## Listening on http://127.0.0.1:5473"},{"path":"intro.html","id":"expresiones-y-asignaciones","chapter":"2 Introducción a R","heading":"2.3 Expresiones y asignaciones","text":"Hay dos tipos de resultados en R: expresiones y asignaciones. Las primeras sólo se muestran la salida estándar y se guardan en una variable; las segundas, se asignan y guardan en una variableExpresión:AsignaciónOperado de asignación. Evitar el uso del igualR distingue entre mayúsculas y minúsculas, así las siguientes variables contienen valores distintosLos comandos pueden separarse por ; o - mejor opción- por un salto de líneatambién pueden definirse asignaciones en más de una línea","code":"\nrnorm(10)##  [1]  0.7979605  1.0878395 -0.6359152  0.4398236  0.8196364  0.1650391\n##  [7] -0.5915663  0.7436936 -0.1450920 -1.1731611\nx <- rnorm(10)\nx##  [1]  0.99989450  2.42087085 -0.51606105 -0.97184273  1.37932604 -0.72765265\n##  [7] -1.08607929  0.03003202 -0.87025071 -2.27234173\na <- 3\nA <- 6\na <- 3; b <-5\na <-\n  pi + 12"},{"path":"intro.html","id":"movimiento-entre-directorios","chapter":"2 Introducción a R","heading":"2.4 Movimiento entre directorios","text":"Para saber en qué directorio estamos tecleamosPara cambiar de directorio utilizamos setwd(\"direccion_a_la_que_quieres_ir\")También podemos usar los comandos de bash dentro de R, utilizando la función system()","code":"\ngetwd()## [1] \"/Users/robertoalvarez/Dropbox/UAQ/Bioinformatica/Introduccion-a-R.github.io\"\nsetwd(\"~\")\nsystem(\"ls -la\")\nsystem(\"pwd\")"},{"path":"intro.html","id":"importante","chapter":"2 Introducción a R","heading":"2.5 Importante","text":"Como regla general todos los nombres van entre comillas: nombre de carpetas, archivos, de columnas, de renglones,etc.","code":""},{"path":"intro.html","id":"operaciones-aritméticas","chapter":"2 Introducción a R","heading":"2.6 Operaciones aritméticas","text":"Se puede sumar, restar, multiplicar,dividir, “exponenciar” y calcular la raíz cuadrada.\nLos operadores son, respectivamente: +,-,*, /,** o ^, sqrt()","code":"\na + b## [1] 20.14159\na - b## [1] 10.14159\na * b## [1] 75.70796\na ** b## [1] 795898.7\na ^ b## [1] 795898.7\nsqrt(a)## [1] 3.89122"},{"path":"intro.html","id":"prioridad-en-las-operaciones","chapter":"2 Introducción a R","heading":"2.7 Prioridad en las operaciones","text":"Las operaciones se efectuan en el siguiente orden:izquierda derechasqrt() y ** , ^“*” y /“+” y -<-Este orden se altera si se presenta un paréntesis. En ese caso la operación dentro del paréntesis es la que se realiza primero.Ejemplos4 + 2 *3 = 4 + 6 = 104-15/3 +3^2 +sqrt(9)= 4-15/3 + 9 +3 = 4-5+12=134-(3+7)^2 + (2+3)/5=4-100+5/5=-95","code":""},{"path":"intro.html","id":"ejercicios","chapter":"2 Introducción a R","heading":"2.7.1 Ejercicios","text":"Resuelve en un pedazo de papel primero para saber cuál sería el resultado de las siguientes operaciones aritméticas. Después comprueba tu resultado tecleandolas en R1 + 2*3 +3 +15/34-15/3 +3^2 +3*sqrt(81)40-(4+3)^2 + (10-5)/3","code":""},{"path":"intro.html","id":"tipos-de-datos-lógicos-o-booleanos","chapter":"2 Introducción a R","heading":"2.8 Tipos de datos lógicos o booleanos","text":"Estos tipos de datos sólo contienen información TRUE o FALSE. Sirven para evaluar expresiones de =, <, > y pueden utilizarse para obtener los elementos de un vector que cumplan con la característica deseada.Dentro de R un valor lógico TRUE equivale 1 y FALSE equivale 0, por lo tanto para contar cuántos TRUEs hay podemos hacer una suma:Ejercicio utiliza una sola líndea de R para averiguar si el logaritmo base de 10 de 20 es menor que la raiz cuadrada de 4.","code":"\n1 < 5## [1] TRUE\n10 == 0  # Es igual a## [1] FALSE\n10 != 0    # NO es igual a## [1] TRUE\n10 <= 0    #Menor o igual ## [1] FALSE"},{"path":"intro.html","id":"caracter","chapter":"2 Introducción a R","heading":"2.8.1 Caracter","text":"Son strings de texto. Se distingue porque los elementos van entre comillas (cada uno). Puede ser desde un sólo caracter hasta oraciones completas. Puede parecer que contienen números, pero las comillaa indican que serán tratados como texto. Podemos subsetearlos por su índice o buscando literalmente el texto.","code":"\nx<- \"La candente mañana de febrero en que Beatriz Viterbo murió, después de una imperiosa agonía que no se rebajó un solo instante ni al sentimentalismo ni al miedo\""},{"path":"intro.html","id":"enteros-y-números-numeric","chapter":"2 Introducción a R","heading":"2.8.2 Enteros y números (numeric)","text":"R por default representa los números como numeric, integer. Estos tipos son dos formas diferentes en las cuales las computadoras pueden guardar los números y hacer operaciones matemáticas con ellos. Por lo común esto importa, pero puede ser relevante para algunas funciones de Bioconductor, por ejemplo ya que el tamaño máximo de un integer en R es ligeramente más chico que el tamaño del genoma humano.¿Cómo revisar si un objeto es numeric o entero?","code":"\nx <- 1\nclass(x)## [1] \"numeric\"\nx <- 1:3\nclass(x)## [1] \"integer\""},{"path":"intro.html","id":"vectors","chapter":"2 Introducción a R","heading":"2.9 # Vectores en R","text":"En R puedes guardar muchos elementos del mismo tipo en un sólo objeto mediante vectores.Un vector es una colección de datos del mismo tipo. Siempre del mismo tipo. es posible mezclarlos.","code":""},{"path":"vectores.html","id":"vectores","chapter":"3 Vectores","heading":"3 Vectores","text":"","code":""},{"path":"vectores.html","id":"definición","chapter":"3 Vectores","heading":"3.1 Definición","text":"Para definir un vector se utiliza la función c(), que siginfica combine","code":"\nx <- c(1,2,6,90,76.7)"},{"path":"vectores.html","id":"longitud-de-un-vector","chapter":"3 Vectores","heading":"3.1.1 Longitud de un vector","text":"Para obtener la longitud de un vector, es decir el número de elementos que tiene\nse utiliza la función length()Como siempre, para mostrar el contenido de una variable\nsólo es necesario poner la variable y presionar enter en la sesión interactiva, si se está en un script es necesario usar la función print()","code":"\nlength(x)## [1] 5"},{"path":"vectores.html","id":"uso-de-la-función-combine-c-y-el-operador","chapter":"3 Vectores","heading":"3.2 Uso de la función combine c() y el operador :","text":"Un vector se puede definir de forma extensiva, es decir poniendo explícitamente todos los valores del vector.Esto es muy poco eficiente menos que los vectores sean muy pequeños por lo que existen funciones para generar algunos casos particulares.\nPor ejemplo, si queremos tener un vector que tenga los primeros 100 números enteros podemos definirlo de la siguiente manera con el uso del operador : :También se puede usar de forma equivalente la función seq() que significa sequence. seq() es una generalización del operador :,con ella podemos generar secuencias numéricas de distintas clase y espaciadas por diferentes rangos. Por ejemplo si queremos tener una secuencia de -12 30 en pasos de 3, es decir -12, -9,-6,…, 27,30\nTeclearíamosPodemos omitir los nombres , ,si usamos el mismo orden, si queremos intercambiarlo debemos necesariamente ponerlos","code":"\ny<-c(\"esto\",\"es\",\"un\",\"vector\")\nz<-c(1,10,100,1000)\nx<-1:100;\nx##   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n##  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n##  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n##  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n##  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n##  [91]  91  92  93  94  95  96  97  98  99 100\nx<-seq(1,100)\nx##   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n##  [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n##  [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n##  [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n##  [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n##  [91]  91  92  93  94  95  96  97  98  99 100\nx<-seq(from=-12,to=30,by=3)\nx##  [1] -12  -9  -6  -3   0   3   6   9  12  15  18  21  24  27  30\ny<-seq(0,1,0.1)\ny##  [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\nz<-seq(by=0.1, to =1, from=0.5)\nz## [1] 0.5 0.6 0.7 0.8 0.9 1.0"},{"path":"vectores.html","id":"acceder-a-elementos-de-un-vector","chapter":"3 Vectores","heading":"3.3 Acceder a elementos de un vector","text":"","code":""},{"path":"vectores.html","id":"elementos-consecutivos-de-un-vector","chapter":"3 Vectores","heading":"3.3.1 Elementos consecutivos de un vector","text":"Para acceder elemetnos de un objeto con índices en R debemos usar los\ncorchetes [] para indicarle que queremos seleccionar esos objetos`","code":"\nx<-c(\"Muchos\", \"años\" ,\"después\" ,\",\", \"frente\", \"al\" ,\"pelotón\")\nx[1:4]## [1] \"Muchos\"  \"años\"    \"después\" \",\"\nx<-c(1,2,3,5,8,13,21)\nx[3:6]## [1]  3  5  8 13"},{"path":"vectores.html","id":"elementos-no-consecutivos-de-un-vector","chapter":"3 Vectores","heading":"3.3.2 Elementos no consecutivos de un vector","text":"Para seleccionar elementos consecutivos definimos un nuevo vector (con la función c() ) de índices que seleccionará los elementos que quieresNo es necesario que estén en orden","code":"\nx<-c(\"Muchos\", \"años\" ,\"después\" ,\",\", \"frente\", \"al\" ,\"pelotón\")\nx[c(1,3,5,7)]## [1] \"Muchos\"  \"después\" \"frente\"  \"pelotón\"\nx<-c(1,2,3,5,8,13,21)\nx[c(2, 7, 4)]## [1]  2 21  5"},{"path":"vectores.html","id":"excluir-elementos-de-un-vector","chapter":"3 Vectores","heading":"3.3.3 Excluir elementos de un vector","text":"Para seleccionar algunos elementos excepto un conjunto de ellos usamos\nel signo menos -Este comando elimina elementos de un vector sólo los selecciona","code":"\nx<-c(1,2,3,5,8,13,21)\nx[-2]## [1]  1  3  5  8 13 21\n# Todos menos el segundo elemento\nx[-c(2, 7, 4)]   # Todos menos el segundo , séptimo y cuarto elemento## [1]  1  3  8 13\nx[-length(x)]    # ¿Esto qué hace?## [1]  1  2  3  5  8 13\nx<-c(1,2,3,5,8,13,21)\nx[-6] ## [1]  1  2  3  5  8 21\nx     # Estoy intacto## [1]  1  2  3  5  8 13 21"},{"path":"vectores.html","id":"agregar-y-quitar-elementos-de-un-vector","chapter":"3 Vectores","heading":"3.4 Agregar y quitar elementos de un vector","text":"Podemos, incluso, definir un vector vacío y luego “llenarlo”","code":"\nx <- c(88,5,12,13)\nx <- c(x[1:3],168,x[4]) \nx## [1]  88   5  12 168  13\nx<-c()\nx                 # Soy un vector vacío :(## NULL\nx[1]<- 2\nx[2:5]<-c(56,78,90,12)\nx                 # Ahora ya no :)## [1]  2 56 78 90 12"},{"path":"vectores.html","id":"repetición-de-elementos-de-un-vector-con-rep","chapter":"3 Vectores","heading":"3.5 Repetición de elementos de un vector con rep()","text":"La función rep() que viene del inglés repeat nos permite repetir elementos en un vector dado. Por ejemplo, rep(x,n veces)También podemos usar la opción para indicar la frecuencia de repetición","code":"\nx<-rep(3,5)\nx## [1] 3 3 3 3 3\ny<-rep(c(1,2,3,5),3)\ny##  [1] 1 2 3 5 1 2 3 5 1 2 3 5\nprimos<-c(1,2,3,5,7,11)\nz<-rep(primos,4)\nz##  [1]  1  2  3  5  7 11  1  2  3  5  7 11  1  2  3  5  7 11  1  2  3  5  7 11\nx<-c(1,2,3,4)\ny<-rep(x,each=2)\ny## [1] 1 1 2 2 3 3 4 4"},{"path":"vectores.html","id":"uso-de-funciones-any-y-all","chapter":"3 Vectores","heading":"3.6 Uso de funciones any() y all()","text":"Las funciones () y () determinan si alguno o todos los elementos de un vector cumplen cierta condición respectivamente. La respuesta siempre será un valor booleano es decir: TRUE o FALSE","code":"\nx<- 1:15\nany(x > 7.5)## [1] TRUE\nany(x > 19.76)## [1] FALSE\nany(x >= 15)## [1] TRUE\nall(x> sqrt(100))## [1] FALSE\nall(x>0)## [1] TRUE"},{"path":"vectores.html","id":"operaciones-con-vectores","chapter":"3 Vectores","heading":"3.7 Operaciones con vectores","text":"Al igual que en álgebra podemos definir varias operaciones que nos dejan siempre otro vector:Suma (resta) de vectoresProducto de vectores (término término)Producto de un escalar por un vectorTambién podemos aplicar funciones para calcular con una sola instrucción varias operaciones útiles, por ejemplo min(), max(), range() ,\nsum(), mean(), median(), sd(),quantile(),unique(),sort()\nSi tienes duda de qué hace alguna de ellas busca en la ayudaPara unique() y sort() conviene tener elementos discretos más que continuos","code":"\nx<-c(1,2,3)\ny<-c(4,5,6)\nx + y ## [1] 5 7 9\nx-y## [1] -3 -3 -3\nx*x## [1] 1 4 9\ny*y## [1] 16 25 36\nx*y## [1]  4 10 18\n3*x                #Multiplicación por escalar: término a término## [1] 3 6 9\nsqrt(2)*y          # Sí, por cualquier escalar!## [1] 5.656854 7.071068 8.485281\n3*x + sqrt(2)*y    # Operaciones más complejas## [1]  8.656854 13.071068 17.485281\nx<-rnorm(1000)\nmin(x)## [1] -4.390599\nmax(x)## [1] 3.003573\nrange(x)## [1] -4.390599  3.003573\nsum(x)## [1] -35.67603\nmean(x)## [1] -0.03567603\nmedian(x)## [1] -0.03247518\nsd(x)## [1] 1.01305\nquantile(x)##          0%         25%         50%         75%        100% \n## -4.39059910 -0.69384146 -0.03247518  0.67262680  3.00357310\nx<- c(rep(3,5),1:15,rep(c(1,2,3),5))\nunique(x)##  [1]  3  1  2  4  5  6  7  8  9 10 11 12 13 14 15\nx<-sample(10,10)\nx##  [1]  7  9  5  3  6  1  2 10  4  8\nsort(x)##  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"vectores.html","id":"gráficos-con-vectores","chapter":"3 Vectores","heading":"3.8 Gráficos con vectores","text":"Podemos graficar los vectores de manera inmediata en R","code":"\nx<- rnorm(10000)\nhist(x,col=\"tomato2\")\nplot(x,col=\"salmon\")\nboxplot(x,col=\"wheat\")"},{"path":"vectores.html","id":"vectores-con-nombre","chapter":"3 Vectores","heading":"3.9 Vectores con nombre","text":"Definimos un vector llamado edadesPodemos definir un vector del mismo tamaño que edades llamado nombresUna de las cracterísticas de R es que podemos asignarles nombres los vectores, para ello usamos la función names()Con ello ahora el vector edades tiene una nueva característica:Podemos selecccionar de la manera usual, por ejemplo, si quiero ver cuál es la edad de Rick, debo seleccionar el 3 elementoEsto es muy poco eficiente y propenso al error sobre todo con vectores muy grandes. Por ello podemos usar los nombres de los vectoresRecuerda que los nombres S--E-M-P-R-E van entre comillasEjercicios:¿Cuál es el promedio de las edades, sin contar el de Beth?Quiten Morty del vector, ordénenlo y guárdenlo como un nuevo objeto.¿Hay alguna edad que sea mayor de 75? ¿Menor de 12? ¿Entre 12 y 20?","code":"\nedades<-c(35,35,70,17,14)\nedades## [1] 35 35 70 17 14\nnombres <-c(\"Jerry\",\"Beth\",\"Rick\", \"Summer\",\"Morty\")\nnombres## [1] \"Jerry\"  \"Beth\"   \"Rick\"   \"Summer\" \"Morty\"\nnames(edades)<-nombres\nedades##  Jerry   Beth   Rick Summer  Morty \n##     35     35     70     17     14\nedades[3]## Rick \n##   70\nedades[\"Rick\"]## Rick \n##   70\nedades[c(\"Rick\",\"Morty\")]##  Rick Morty \n##    70    14"},{"path":"vectores.html","id":"tamaños-de-genomas","chapter":"3 Vectores","heading":"3.9.1 Tamaños de genomas","text":"Ahora veamos un ejemplo más “biológico”Por ejemplo si quisierámos ver el tamño en bp simplemente multiplicamos por el valor del prefijo Mega = 1 millónSe pueden seleccionar elementos de un vector utilizando corchetesPara obtener elementos consecutivosPara obtener elementos consecutivosPara selecciona (eliminar, ni quitar) elementos excepto algunosPara referirnos los elementos por su nombreAdemás de algunas operaciones aritméticas, se pueden calcular la media, máximo, mediana, mínimo, suma y longitud de los vectoresEjercicioGenerar un vector de las edades de 10 de tus compañerosAsignales nombre.Encuentra el mínimo,máximo, media, mediana, la desviación estándar, la longitud del vector y selecciona sólo los elementos impares.Elimina el máximo y el mínimo y con el vector resultante realiza un histograma.Crea un vector de caracteres con diez nombres de especies y asocialo con su número de acceso de NCBI para su genoma en nucleótidos.","code":"\ngenomeSizeM_BP<-c(3234.83,2716.97,143.73,0.014281,12.1)\ngenomeSizeM_BP*1e6## [1] 3234830000 2716970000  143730000      14281   12100000\norganismo<-c(\"Human\",\"Mouse\",\"Fruit Fly\",\"Roundworm\",\"Yeast\")\nnames(genomeSizeM_BP) <- organismo\ngenomeSizeM_BP##       Human       Mouse   Fruit Fly   Roundworm       Yeast \n## 3234.830000 2716.970000  143.730000    0.014281   12.100000\ngenomeSizeM_BP[1]##   Human \n## 3234.83\ngenomeSizeM_BP[1:4]##       Human       Mouse   Fruit Fly   Roundworm \n## 3234.830000 2716.970000  143.730000    0.014281\ngenomeSizeM_BP[c(1,2,5)]##   Human   Mouse   Yeast \n## 3234.83 2716.97   12.10\ngenomeSizeM_BP[-c(1,3,5)]##       Mouse   Roundworm \n## 2716.970000    0.014281\ngenomeSizeM_BP[c(\"Yeast\",\"Human\")]##   Yeast   Human \n##   12.10 3234.83"},{"path":"vectores.html","id":"cómo-lidiar-con-las-nas","chapter":"3 Vectores","heading":"3.10 ¿Cómo lidiar con las NAs ?","text":"Es (muy) freceunte que en bases de datos se tengan valores NA, es decir medidas que pudieron realizarse, medidas perdidas, etc. Para ello se utiliza NA. R trata de manera especial las NAsExiste una fución para determinar si un elemento es o una NA. La función es .na()Si queremos calcular ciertas funciones numéricas R sabrá qué hacerSin emabrgo, podemos decirle R que las omita, indicando como argumento de la función mean() na.rm=TRUE que significa na remove¿Qué otras funciones tienen esta opción?","code":"\nx <- c(88,NA,12,168,13)\nx <- c(88,NA,12,168,13)\nis.na(x)## [1] FALSE  TRUE FALSE FALSE FALSE\nx <- c(88,NA,12,168,13)\nmean(x)## [1] NA\nx <- c(88,NA,12,168,13)\nmean(x,na.rm=TRUE)## [1] 70.25"},{"path":"vectores.html","id":"filtrado-de-elementos-de-un-vector","chapter":"3 Vectores","heading":"3.11 Filtrado de elementos de un vector","text":"Podemos generar vectores de que sean subconjuntos de vectores más grandes que cumplan cierta(s) condición(es)Veamos paso paso qué es lo que hace este procesola representación interna de los valores booleanos FALSE y TRUEson 0 y 1 respectivamente","code":"\nun_vector<-c(1,2,3,5,7,11,13,17,19) \notro_vector <- un_vector[un_vector*un_vector > 10]   # Leeme de adentro hacia afuera\notro_vector## [1]  5  7 11 13 17 19\nun_vector## [1]  1  2  3  5  7 11 13 17 19\nun_vector*un_vector > 10    # Mira, de adentro hacia afuera## [1] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\nindices<-un_vector*un_vector > 10 \nun_vector[indices]## [1]  5  7 11 13 17 19\nun_vector[c(FALSE,FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE)]## [1]  5  7 11 13 17 19\nun_vector[c(rep(0,3),rep(1,1))]## [1] 1"},{"path":"vectores.html","id":"filtrado-con-subset","chapter":"3 Vectores","heading":"3.11.1 Filtrado con subset()","text":"Podemos usar la función subset()para hacer lo mismo que en el caso anterior excepto que omite los NAQué pasa si tenemos NAs. Si usamos el método anterior obtendríamosEn cambio con subset()","code":"\nun_vector<-c(1,2,3,5,7,11,13,17,19) \notro_vector <- subset(un_vector,un_vector*un_vector > 10)   \notro_vector## [1]  5  7 11 13 17 19\nun_vector<-c(1,2,3,5,7,11,NA,13,17,NA,19) \notro_vector <- un_vector[un_vector*un_vector > 10]   # Leeme de adentro hacia afuera\notro_vector  # Aquí salen las NAs## [1]  5  7 11 NA 13 17 NA 19\nun_vector<-c(1,2,3,5,7,11,NA, 13,17,NA, 19) \notro_vector <- subset(un_vector,un_vector*un_vector > 10)   \notro_vector  # Aquí ya no aparecen las NAs## [1]  5  7 11 13 17 19"},{"path":"vectores.html","id":"la-función-de-selección-which","chapter":"3 Vectores","heading":"3.11.2 La función de selección which()","text":"La función () nos regresa los índices es decir nos dicen quiénes cumplen cierta condiciónAcá nos dicen quiénes","code":"\nz <- c(5,2,-3,8)\nwhich(z*z > 8)## [1] 1 3 4\nz[which(z*z > 8)]## [1]  5 -3  8"},{"path":"vectores.html","id":"cómo-podemos-ver-si-dos-vectores-son-iguales","chapter":"3 Vectores","heading":"3.12 ¿Cómo podemos ver si dos vectores son iguales?","text":"Dos vectores son iguales si elemento elemento son idénticos.\nPor lo tanto deben de ser del mismo tamaño. Para probar si dos elementos son iguales se utiliza el operador de comparación == son dos signos iguales juntos, sin espcaio. confundir con el operador = que se puede usar como operador de asiganción (aunque es recomendable su uso. De hecho está prohibido en este curso)¿Qué pasaría si confundo y escribo el operador de igualdad en lugar del de comparación?Para vectores grandes puedo usar la función () que ya vimos arriba¿Cómo podríamos corrobar que son iguales usando ?También podríamos utilizar que TRUE es 1 y que FALSE es 0¿Por qué este código nos dice que sí son iguales?","code":"\nx<-c(1,4,9,16,25)\ny<-1:5\ny<-y*y\nx==y## [1] TRUE TRUE TRUE TRUE TRUE\ny <-5:9\ny## [1] 5 6 7 8 9\nx=y\nx## [1] 5 6 7 8 9\ny## [1] 5 6 7 8 9\nx <- seq(1,10000,1)\ny <- seq(1,10000,1)\nall(x==y)## [1] TRUE\nsum(x==y)## [1] 10000"},{"path":"vectores.html","id":"factor","chapter":"3 Vectores","heading":"3.12.1 Factor","text":"Los factores son un tipo de vector que puede tomar un número “limitado” de valores, que normalmente se utilizan como variables categóricas. Por ejemplo: macho/hembra. Es útil tenener este tipo de objeto porque varios modelos estadísticos que se pueden correr en R los utilizan. los valores que pueden tomar los elementos del factor se les conoce como levels.Los factores son una manera computacionalmente eficiente de almacenar caracteres, pues cada valor único (level) se guarda solo una vez y los datos se les asigna un valor entero.El que existan los levels permite realizar ciertas operaciones y manipular el contenido del factor.EjercicioLee la ayuda de .factor para determinar cómo crear un factor “ordenado”Crea un vector con los meses en los que todas las alumnas del grupo cumplen años.Aprovecha los levels para generar un objeto que guarde el número de estudiantes que cumplena ño cada mes.EjercicioGenera un vector con el nombre de 10 virusAsocia esos nombres con su número de acceso en NCBIGenera otro vector que contega los tamaños en pb y los nombresDetermina cuáles son mayores de 300 bpAsocia un subconjunto de vectores que sean mayores (menores 300 bp) y mayores (mayores 300 bp)Haz un histograma con los tamaños de todosDibuja un boxplot con los tamaños de todos.Pon en el eje los nombres de todos.","code":"\nx<- c(1,2,2,3,1,2,3,3,1,2,3,3,1)\nx##  [1] 1 2 2 3 1 2 3 3 1 2 3 3 1\nas.factor(x)##  [1] 1 2 2 3 1 2 3 3 1 2 3 3 1\n## Levels: 1 2 3\nx<-as.factor(x)\nx##  [1] 1 2 2 3 1 2 3 3 1 2 3 3 1\n## Levels: 1 2 3\nmeses = c(\"March\",\"April\",\"January\",\"November\",\"January\",\n       \"September\",\"October\",\"September\",\"November\",\"August\",\n        \"January\",\"November\",\"November\",\"February\",\"May\",\"August\",\n        \"July\",\"December\",\"August\",\"August\",\"September\",\"November\",\n         \"February\",\"April\")\nmeses##  [1] \"March\"     \"April\"     \"January\"   \"November\"  \"January\"   \"September\"\n##  [7] \"October\"   \"September\" \"November\"  \"August\"    \"January\"   \"November\" \n## [13] \"November\"  \"February\"  \"May\"       \"August\"    \"July\"      \"December\" \n## [19] \"August\"    \"August\"    \"September\" \"November\"  \"February\"  \"April\"\nmeses<-as.factor(meses)\nmeses##  [1] March     April     January   November  January   September October  \n##  [8] September November  August    January   November  November  February \n## [15] May       August    July      December  August    August    September\n## [22] November  February  April    \n## 11 Levels: April August December February January July March May ... September\ntable(meses)## meses\n##     April    August  December  February   January      July     March       May \n##         2         4         1         2         3         1         1         1 \n##  November   October September \n##         5         1         3\nlevels(meses)##  [1] \"April\"     \"August\"    \"December\"  \"February\"  \"January\"   \"July\"     \n##  [7] \"March\"     \"May\"       \"November\"  \"October\"   \"September\"\nlevels(meses)[1]## [1] \"April\"\nlevels(meses)[1]<-\"Abril\"\nlevels(meses)##  [1] \"Abril\"     \"August\"    \"December\"  \"February\"  \"January\"   \"July\"     \n##  [7] \"March\"     \"May\"       \"November\"  \"October\"   \"September\"\nmeses##  [1] March     Abril     January   November  January   September October  \n##  [8] September November  August    January   November  November  February \n## [15] May       August    July      December  August    August    September\n## [22] November  February  Abril    \n## 11 Levels: Abril August December February January July March May ... September"},{"path":"matrices.html","id":"matrices","chapter":"4 Matrices","heading":"4 Matrices","text":"Una matriz es un arreglo rectangular de\ndatos del mismo tipo. . se pueden mezclar.","code":""},{"path":"matrices.html","id":"creación-de-matrices","chapter":"4 Matrices","heading":"4.1 Creación de matrices","text":"Para crear una matriz podemos usar la función matrix(). Dicha función requiere de, al menos un vector e indicar al menos una dimensión.Se el indica el numero de renglones y el número de columnas como opción usando nrow y ncol respectivamente.La matriz se llena por renglones hasta completarse¿Por qué sólo es necesario indicar una dimensión?Podemos decirle R que cambie el orden con el que llena la matriz, es decir en lugar de que lo haga por columnas, lo haga por renglones","code":"\ny <- matrix(c(1,5,8,-4),nrow=2,ncol=2)\ny##      [,1] [,2]\n## [1,]    1    8\n## [2,]    5   -4\nz<-matrix(c(TRUE, FALSE,rep(c(TRUE, FALSE),3)),nrow=4)\nz##       [,1]  [,2]\n## [1,]  TRUE  TRUE\n## [2,] FALSE FALSE\n## [3,]  TRUE  TRUE\n## [4,] FALSE FALSE\nm <- matrix(c(1,2,3,4,5,6),nrow=2,byrow=TRUE)\nm##      [,1] [,2] [,3]\n## [1,]    1    2    3\n## [2,]    4    5    6"},{"path":"matrices.html","id":"dimensiones-de-un-matriz","chapter":"4 Matrices","heading":"4.2 Dimensiones de un matriz","text":"La dimensión de una matriz es el número de renglones y de columnas respectivamente. Se puede obtener usando\nla función dim()Así una matriz se distingue de un vector ya que tiene, además de renglones, columnas.Escalar, vector y matrizUna forma mucho menos eficiente de definir una matriz es declarando una matriz sin elementos y después llenándolos de forma explícita","code":"\ndim(y)## [1] 2 2\ndim(z)## [1] 4 2\n y <- matrix(nrow=2,ncol=2)\ny[1,1] <- \"Esta\"\ny[2,1] <- \"es\"\ny[1,2] <- \"una\"\ny[2,2] <- \"matriz\"\ny##      [,1]   [,2]    \n## [1,] \"Esta\" \"una\"   \n## [2,] \"es\"   \"matriz\""},{"path":"matrices.html","id":"operaciones-con-matrices","chapter":"4 Matrices","heading":"4.3 Operaciones con matrices","text":"","code":""},{"path":"matrices.html","id":"multiplicación-de-un-escalar-con-una-matriz","chapter":"4 Matrices","heading":"4.3.1 Multiplicación de un escalar con una matriz","text":"","code":"\n3*m##      [,1] [,2] [,3]\n## [1,]    3    6    9\n## [2,]   12   15   18"},{"path":"matrices.html","id":"suma-de-dos-matrices","chapter":"4 Matrices","heading":"4.3.2 Suma de dos matrices","text":"Para sumar matrices deben tener las mismas dimensiones","code":"\nm + m##      [,1] [,2] [,3]\n## [1,]    2    4    6\n## [2,]    8   10   12\nn<-matrix(c(2,3,4,5,6,7),ncol=3)\nm+n##      [,1] [,2] [,3]\n## [1,]    3    6    9\n## [2,]    7   10   13\ndim(n)## [1] 2 3\ndim(m)## [1] 2 3\n(dim(n)-dim(m))==0## [1] TRUE TRUE"},{"path":"matrices.html","id":"multiplicación-de-matrices","chapter":"4 Matrices","heading":"4.3.3 Multiplicación de matrices","text":"Se utiliza el operador %*%. Sí. Son tres caracteres. E incluyen dos %.\nhay espacios y es un sólo operador .¿Recuerdas cuál es el criterio para calcular el producto de matrices?\n¿Recuerdas cómo se multiplican dos matrices?","code":"\nn<-matrix(c(2,3,4,5,6,7),ncol=2)\nn##      [,1] [,2]\n## [1,]    2    5\n## [2,]    3    6\n## [3,]    4    7\nm %*% n ##      [,1] [,2]\n## [1,]   20   38\n## [2,]   47   92"},{"path":"matrices.html","id":"seleccionar-elementos-de-matrices","chapter":"4 Matrices","heading":"4.4 Seleccionar elementos de matrices","text":"Para seleccionar elementos de matrices se hace de forma análoga vectores, es decir, se utiliza el operador []. Sólo que esta vez hay que indicar tanto los renglones como la columna en ese orden","code":"\nm[2,3]  # Este es el segundo renglón tercera columna de m## [1] 6\nn[3,2]  # Este es el elemento que está en el renglón 3 y columna 2 de la matriz n ## [1] 7"},{"path":"matrices.html","id":"seleccionar-todoa-una-renglóncolumna","chapter":"4 Matrices","heading":"4.4.1 Seleccionar todo(a) un(a) renglón(columna)","text":"Para seleccionar todos los elementos de un renglón dado se utiliza la\nsiguiente sintáxisPara una columna","code":"\nm[2,]  # Todos los elementos que están en el segundo renglón## [1] 4 5 6\nm[,3] # Toda la tercera columna## [1] 3 6"},{"path":"matrices.html","id":"selecccionar-elementos-de-una-matriz","chapter":"4 Matrices","heading":"4.4.2 Selecccionar elementos de una matriz","text":"¿Qué hace lo siguiente?","code":"\nm[1:2,1]## [1] 1 4\nm[1:2,2:3]##      [,1] [,2]\n## [1,]    2    3\n## [2,]    5    6\nm[-1,]## [1] 4 5 6\nm[-1,-c(1,3)]## [1] 5"},{"path":"matrices.html","id":"nombres-a-renglones-y-columnas","chapter":"4 Matrices","heading":"4.5 Nombres a renglones y columnas","text":"Al igual que con vectores le podemos poner nombres tanto renglones como columnas para ello utilizamos rownames() y colnames()","code":"\nm   # No tengo nombres :(##      [,1] [,2] [,3]\n## [1,]    1    2    3\n## [2,]    4    5    6\ncolnames(m)<-LETTERS[1:3]\nrownames(m)<-letters[5:6]\nm   # Ahora sí. Feos, pero nombres :) :)##   A B C\n## e 1 2 3\n## f 4 5 6\nm[\"e\",\"C\"]## [1] 3\nm[\"e\",\"C\"]==m[1,3]## [1] TRUE"},{"path":"Estructuras_de_seleccion.html","id":"Estructuras_de_seleccion","chapter":"5 Estructuras de selección","heading":"5 Estructuras de selección","text":"ifif … elseifelseif ... else ...else ...else","code":""},{"path":"Estructuras_de_seleccion.html","id":"if-si-condicional","chapter":"5 Estructuras de selección","heading":"5.1 If (si condicional)","text":"La instrucción nos permite probar una condición y esa condición debe arrojar un valor booleano, es decir, un valor de verdad (TRUE o FALSE) Si la condición es verdadera se ejecuta lo que está dentro de los corchetes, de lo contrario, ejecuta lo que sigue después del corchete de cierre.Definición: Lo que se encuentra dentra del corchete se llama cuerpo ( body ) de la declaración ifDiagrama de flujo del IfLa sintáxis de una condición consiste en lo siguiente:(condicion){si la condicion es verdaderaEjecuta TODO lo que está en los corchetes}","code":""},{"path":"Estructuras_de_seleccion.html","id":"sintaxis","chapter":"5 Estructuras de selección","heading":"5.1.1 Sintaxis","text":"","code":"if(<condition>) {\n        ## Hace algo\n} \n## Continúa con el resto del código"},{"path":"Estructuras_de_seleccion.html","id":"errores-comunes-en-el-if","chapter":"5 Estructuras de selección","heading":"5.1.2 Errores comunes en el if","text":"incializar la variable de la condición.La condición arroja un valor de verdad.poner todo lo que quieres que haga dentro de los corchetes.Este es un error, es más bien una advertencia, si la condición arroja un sólo valor de verdad sólo toma en cuenta el primero de ellos.###Ejemplos de uso del ","code":"\nmayor_de_edad<-18\n\nedad<-20\n\nif(edad >=mayor_de_edad){\n  print(\"Eres mayor de edad\")\n}## [1] \"Eres mayor de edad\"\nx<-5+4\nprint(x)## [1] 9\nminimo<-20000\ndinero<-15000\n\nif(dinero>=minimo){\n  print(\"¿Cómo está Cancún?\")\n  print(\"La vida es buena\")\n  sobrante<-dinero-minimo\n  print(paste(\"Me queda $\", sobrante))\n}\nprint(\"Acá sigue\")## [1] \"Acá sigue\""},{"path":"Estructuras_de_seleccion.html","id":"ejercicios-1","chapter":"5 Estructuras de selección","heading":"5.1.2.1 Ejercicios","text":"Elabora un programa que compare tu estatura con tu ídolx y determine si eres más altx.Toma dos archivos fasta de virus distintos. Leelos con Biostrings y compara sus tamaños ( en bp) y determina si el primero es más grande que el segundo.partir del archivo de anotación del genoma de un organismo determina toma dos proteínas al azar y compara sus tamaños. Toma todos los genes de la cadena positiva y todos los de la negativa compara sus tamaños promedio y determina cuál de estos es más grande.","code":""},{"path":"Estructuras_de_seleccion.html","id":"combinación-de-operadores-booleanos","chapter":"5 Estructuras de selección","heading":"5.2 Combinación de operadores booleanos","text":"Los operadores lógicos o booleanos se pueden combinar para formar enunciados complejos por ejemplo:Tengo vacaciones (del trabajo y/o la escuela)Tengo dineroSi las dos condiciones son ciertas entonces puedo hacer algoTambién podría ser que basta con que una de ellas sea cierta para que haga algo.","code":""},{"path":"Estructuras_de_seleccion.html","id":"and","chapter":"5 Estructuras de selección","heading":"5.2.1 And (&)","text":"El operador booleano & representa el y lógico. Estos operadores binarios nos sirven para unir al menos dos enunciados que tienen valor de verdadero o falso (Tengo dinero (V/F), Tengo vacaciones (V/F))Con estas dos operaciones puedo unirlas utilizando el operador y lógico ((&) representado en R con el símbolo del ampersand (&)Tengo dinero Tengo vacionesPara saber el valor booleano (V/F) del enunciado anterior debemos concocer los valores de verdad de los enunciados por separadoPor ejemplo, podemos representar al primer enunciado por p y al segundo enunciado por qp: Tengo dineroq: Tengo vacacionesPara saber cuál es el valor de verdad del enunciado compuesto debemos ver cuáles son todas las combinaciones de valores de verdad de los enunciados que la componen: p verdadero y q verdadero, p falso y q verdadero, p falso y q verdadero, p falso y q falso. Eso se resumen en las tablas de verdad de los operadoresTabla de verdad del ANDEs decir, el & solo es verdadero cuando ambas condciones son verdaderas.Esto representa lo que se observa en la realidad: es decir, solo hago algo si tengo y tengo vacaciones. Si una de ellas se cumple (es decir, es falsa) entonces se lleva cabo la acción.","code":""},{"path":"Estructuras_de_seleccion.html","id":"or","chapter":"5 Estructuras de selección","heading":"5.2.2 OR (|)","text":"El operador booleano | representa el o lógico. Estos operadores binarios nos sirven para unir al menos dos enunciados que tienen valor de verdadero o falso (Tengo dinero (V/F), Tengo vacaciones (V/F))Con estas dos operaciones puedo unirlas utilizando el operador y lógico ((|) representado en R con el símbolo de la barrita (|)Tengo dinero Tengo vacionesPara saber el valor booleano (V/F) del enunciado anterior debemos concocer los valores de verdad de los enunciados por separadoPor ejmplo podemos representar al primer enunciado por p y al segundo enunciado por qp: Tengo dineroq: Tengo vacacionesPara saber cuál es el valor de verdad del enunciado compuesto debemos ver cuáles son todas las combinaciones de valores de verdad de los enunciados que la componen: p verdadero y q verdadero, p falso y q verdadero, p falso y q verdadero, p falso y q falso. Eso se resumen en las tablas de verdad de los operadoresTabla de verdad del operador OREs decir haría algo, por ejemplo, irme la playa cuando al menos una condición se cumpla. Por ejemplo que tenga dinero aunque tenga vacaciones, que tenga vacaciones aunque tenga dinero y, obviamente, también cuando las dos se cumplen.Es decir, el | solo es falso cuando ambas condiciones son falsas.","code":""},{"path":"Estructuras_de_seleccion.html","id":"ejemplos-de-combinaciones","chapter":"5 Estructuras de selección","heading":"5.2.3 Ejemplos de combinaciones","text":"Por eejmplo es útil para intervalos\\[\n18 \\leq edad \\leq 29\n\\]Esta condición la podemos expresar mediante la combinación de dos: la edad debe ser mayor igual 18 y (, &) la edad debe ser menor o igual que 29Pregunta: ¿qué pasaría si se pone un como unión entre las dos condicioneso así (¿es lo mismo?)","code":"\nif (edad >= 18 & edad <=29){\n  print(\"Te toca vacunarte\")\n}## [1] \"Te toca vacunarte\"\nif (edad >= 18 | edad <=29){\n  print(\"Te toca vacunarte\")\n}## [1] \"Te toca vacunarte\"\nif (edad <= 29 | edad >= 18){\n  print(\"Te toca vacunarte\")\n}## [1] \"Te toca vacunarte\""},{"path":"Estructuras_de_seleccion.html","id":"ejercicio","chapter":"5 Estructuras de selección","heading":"5.3 Ejercicio","text":"¿Cómo harías una condición que considere que te gusta el mole y el pozole?¿Cómo harías una condición que considere que te gusta el mole y el pozole?¿Cómo harías una condición que considere que te gusta el mole o el pozole?¿Cómo harías una condición que considere que te gusta el mole o el pozole?","code":""},{"path":"Estructuras_de_seleccion.html","id":"if-else-si-de-otro-modo","chapter":"5 Estructuras de selección","heading":"5.4 If … else (si … de otro modo)","text":"Si además quieres que se ejecute algo cuando la condición es falsa entonces debes usar la declaración … elseDiagrama_if_else","code":"if (condición) { # Si la condición es cierta\nhace esto\ny esto\ny esto\n} else { # De otro modo, es decir si es falsa hace lo que #está en el corchete\nentonces hace esto otro\ny esto otro\ny esto\n}\nminimo<-20000\nvacaciones<-\"SI\"\ndinero<-21000\nif(dinero>=minimo & vacaciones==\"SI\"){\n  print(\"Me voy a la playa, looser\")\n}else{\n  print(\"Me quedo en mi casa\")\n}## [1] \"Me voy a la playa, looser\""},{"path":"Estructuras_de_seleccion.html","id":"ifelse","chapter":"5 Estructuras de selección","heading":"5.5 ifelse","text":"Si la condición es muy simple ,tanto para cuando es verdadero como cuando es falso se puede implementar la función ifelse en una línea. Es equivalente la condición compuesta pero ahorramos código.","code":"\nedad<-21\nifelse(edad>=18, \"Ya eres grande\",\"Todavia no puedes beber (legalmente)\")## [1] \"Ya eres grande\"\nedad<-12\nifelse(edad>=18, \"Ya eres grande\",\"Todavia no puedes beber (legalmente)\")## [1] \"Todavia no puedes beber (legalmente)\""},{"path":"Estructuras_de_seleccion.html","id":"if-else-if-else-si-si-no-si-si-no-si-si-no","chapter":"5 Estructuras de selección","heading":"5.6 If … else if … else ( si, si no si , si no si, si no)","text":"Si tienes más opciones, es decir alternativas, puedes usar la sentencia … else …else …elseImportante\nEsta estructura se ejecuta solo en la primera que sea verdadera o si hay una verdadera ejecuta lo que esta en el else\nEsta estructura se ejecuta solo en la primera que sea verdadera o si hay una verdadera ejecuta lo que esta en el elseDiagrama de flujo del … else … else …elsePregunta: ¿por qué es necesario poner un en el último else?","code":"if ( condicion 1) {\nHace cosas\n} else if ( condcion 2) {\nHace otras cosas\n} else if ( condicion 3) {\nHace estas otras cosas\n} else {\nNo le queda de otra y hace esto\n}\nnumero<-3\nif(numero > 0){\n  print(\"Tu número es positivo\")\n}else if (numero <0){\n  print(\"Tu número es negativo\")\n}else{\n  print(\"Tu número es cero\")\n}## [1] \"Tu número es positivo\"\nnumero<- -27\nif(numero > 0){\n  print(\"Tu número es positivo\")\n}else if (numero <0){\n  print(\"Tu número es negativo\")\n}else{\n  print(\"Tu número es cero\")\n}## [1] \"Tu número es negativo\"\nnumero<- 0\nif(numero > 0){\n  print(\"Tu número es positivo\")\n}else if (numero <0){\n  print(\"Tu número es negativo\")\n}else{\n  print(\"Tu número es cero\")\n}## [1] \"Tu número es cero\""},{"path":"Estructuras_de_seleccion.html","id":"ejercicios-2","chapter":"5 Estructuras de selección","heading":"5.7 Ejercicios","text":"Elabora un programa que con tu fecha de cumpleaños te diga en qué estación del año naciste.Elabora un programa que con tu fecha de cumpleaños te diga en qué estación del año naciste.Elabora un porgrama que partir de las calficaciones de tus examenes parciales y 8 quincenales arroje si exentaras o este curso usando los criterios definidos en el programa del curso. Asume que en las tareas y demás actividades tienes 10.Elabora un porgrama que partir de las calficaciones de tus examenes parciales y 8 quincenales arroje si exentaras o este curso usando los criterios definidos en el programa del curso. Asume que en las tareas y demás actividades tienes 10.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
